/*! PoA - v0.1 - 2014-07-10
Consid 2014 */"use strict";

angular.module("myApp.controllers", []).controller("AboutCtrl", function() {}).controller("EditAnmalanCtrl", [ "$scope", "$routeParams", "$location", "flash", "AnmalanService", "PersonService", function(a, b, c, d, e, f) {
    if (a.isRegisterNew = !1, a.userLoggedIn = f.isInitialized(), !a.userLoggedIn) return d.setMessage("Logga in först, för att editera en anmälan"), 
    c.path("/login/"), void a.$apply();
    var g = function(b, c) {
        a.anmalan = c.results[0], a.$apply();
    };
    e.findOne(b.anmalanId, g), a.saveAnmalan = function(b) {
        $.when(e.save(angular.copy(b))).done(function() {
            d.setNotification("Anmälan uppdaterad"), a.$apply();
        }).fail(function(a) {
            window.alert("Kunde inte spara (uppdaterad) anmälan\n" + a);
        });
    };
} ]).controller("RegisterCtrl", [ "$scope", "$location", "AnmalanService", "flash", "PersonService", function(a, b, c, d, e) {
    a.setupNewStuletObjekt = function() {
        a.newStuletObjekt = {
            namn: null,
            beskrivning: null,
            typ: null,
            stoldmarkning: "Nej",
            maskinId: null
        }, a.anmalan.stulnaObjekt.push(a.newStuletObjekt);
    }, a.saveAnmalan = function(e) {
        $.when(c.create(angular.copy(e))).done(function(c) {
            d.setMessage("Anmälan sparad"), b.path("/anmalan/" + c), a.$apply();
        }).fail(function(a) {
            window.alert("Kunde inte spara anmälan\n" + a);
        });
    }, a.isRegisterNew = !0, a.userLoggedIn = e.isInitialized(), a.userLoggedIn ? (a.anmalan = c.newAnmalanInstance(e.getPersonToAttach(), e.getOrganisation()), 
    a.username = e.getUsername(), a.setupNewStuletObjekt()) : (d.setMessage("Logga först, för att skapa en anmälan"), 
    d.setMessage("Logga först, för att skapa en anmälan"), b.path("/login/"));
} ]).controller("LoginCtrl", [ "$scope", "LoginService", "$location", "flash", "PersonService", function(a, b, c, d, e) {
    a.username = e.getUsername(), a.userLoggedIn = e.isInitialized(), a.userLoggedIn && (a.fullName = e.getPerson().firstname + " " + e.getPerson().lastname), 
    a.userLoggedIn && d.setNotification("Du är redan inloggad som " + a.fullName + " (" + a.username + ")"), 
    a.login = function() {
        $.when(b.login(a.username, a.password)).done(function(b) {
            d.setMessage("Du är inloggad som " + b.person.firstname + " " + b.person.lastname + " (" + a.username + ")"), 
            console.log("Inloggad", b), c.path("/list"), a.$apply();
        }).fail(function() {
            d.setNotification("Felaktigt användarnamn eller lösenord");
        });
    }, a.logout = function() {
        a.userLoggedIn = !1, e.kill(), d.setNotification("Du är inte längre inloggad");
    };
} ]).controller("AnmalanCtrl", [ "$scope", "AnmalanService", "$routeParams", "PersonService", "$location", "flash", function(a, b, c, d, e) {
    a.showLoggmeddelanden = !0, a.showHandelser = !1, a.showFieldsForNew = !1, a.isLoggedIn = !1, 
    a.ticket = {}, a.showFieldsForNewFile = !1, a.logMessages = [];
    d.isInitialized() && (a.isLoggedIn = !0, a.loggedInUser = d.getUsername()), a.gotoEdit = function() {
        e.path("/editera/" + a.ticket._id);
    }, a.displayHandelser = function() {
        a.showHandelser = !0, a.showLoggmeddelanden = !1;
    }, a.displayLoggmeddelanden = function() {
        a.showLoggmeddelanden = !0, a.showHandelser = !1;
    }, a.startNew = function() {
        a.showFieldsForNew = !0, a.showFieldsForNewFile = !1;
    }, a.saveNew = function(c, d, e) {
        a.showFieldsForNew = !1, $.when(b.addLogMessage(a.ticket._id, c, d, e)).done(function(b) {
            console.log("addLogMessage ok", b), a.findAnmalan();
        }).fail(function(a) {
            console.log("addLogMessage ERROR", a), window.alert("Något gick fel vid skapandet av ditt meddelande:" + a.status);
        }), a.subject = null, a.body = null;
    }, a.abortNew = function() {
        a.showFieldsForNew = !1;
    }, a.skickaTillPolisen = function(c) {
        $.when(b.skickaTillPolisen(a.ticket._id, a.ticket.titel, c)).done(function(b) {
            console.log("skickaTillPolisen ok", b), a.findAnmalan();
        }).fail(function(a) {
            console.log("skickaTillPolisen ERROR", a), window.alert("Något gick fel när anmälan skickades till polisen:" + a.status);
        });
    }, a.startNewFile = function() {
        a.showFieldsForNewFile = !0, a.showFieldsForNew = !1;
    }, a.setNewFile = function(b) {
        a.newfile = b;
    }, a.saveNewFile = function(c) {
        a.showFieldsForNewFile = !1, b.addFile(a.ticket._id, a.newfile, c, function() {
            console.log("ladda upp fil done");
        }), a.uploadfile = null, a.newfile = null;
    }, a.abortNewFile = function() {
        a.showFieldsForNewFile = !1;
    }, a.findAnmalan = function() {
        {
            var d = function(b, c) {
                a.ticket = c.results[0], c.results[0].loggbok && (a.logMessages = c.results[0].loggbok), 
                a.showFieldsForNew = 0 === a.logMessages.length, a.$apply();
            };
            b.findOne(c.anmalanId, d);
        }
    }, a.findAnmalan(), !a.isLoggedIn;
} ]).controller("ListCtrl", [ "$scope", "AnmalanService", function(a, b) {
    a.tickets = [], a.systemEvents = [], a.toPresentation = function(a) {
        var b = a.handelser[a.handelser.length - 1], c = "uppdaterad";
        return "logg" === b.typ ? c += " med loggmeddelande" : "skapad" === b.typ && (c = " skapad"), 
        {
            titel: a.titel,
            av: b.person.firstname + " " + b.person.lastname,
            anmalanId: a._id,
            typ: c
        };
    }, a.update = function() {
        b.findAll(function(b, c) {
            a.tickets = c, a.$apply();
        }, function(b, c) {
            var d = a.toPresentation(c);
            console.log("callback handelse", b, c, d), a.systemEvents.push(d), a.$apply();
        });
    }, a.update();
} ]);